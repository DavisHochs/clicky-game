{"version":3,"sources":["components/CharacterCard/CharacterCard.js","components/NavBar.js","components/Score.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","id","name","image","isPicked","className","key","data-id","onClick","src","alt","NavBar","props","Score","type","score","App","state","characters","pickedCharacters","topScore","message","modalIsOpen","event","target","attributes","getNamedItem","value","console","log","shuffleCharacters","checkGuess","updateTopScore","newState","cb","length","setState","shuffleArray","array","i","j","x","Math","floor","random","includes","alert","push","checkWin","this","subtitle","style","color","map","character","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d079b82.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./charactercard.css\";\n\nconst CharacterCard = ({ id, name, image, isPicked }) => (\n    <div \n        className=\"card\"\n        key={id}\n        data-id={id}\n        name={name}\n        onClick={isPicked}\n        >\n        <div className=\"card-image\">\n            <img src={image} alt={name} name={name}/>\n        </div>\n    </div>\n)\n\nexport default CharacterCard;","import React from 'react'\n\nconst NavBar = props => {\n    return (\n        <nav className=\"teal lighten-2\">\n            <div className=\"valign-wrapper\">\n                <p className=\"brand-logo center\">Clicky Game</p>\n            </div>\n        </nav>\n    )\n}\n\nexport default NavBar\n","import React from 'react';\n\nconst Score = props => (\n    <h4 className=\"score\">\n        {props.type}: {props.score}\n    </h4>\n)\n\nexport default Score;\n","import React, {Component} from 'react';\nimport CharacterCard from './components/CharacterCard/CharacterCard';\nimport NavBar from './components/NavBar';\nimport Score from './components/Score';\nimport characters from './characters.json';\nimport Modal from 'react-modal';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    characters: characters,\n    pickedCharacters: [],\n    topScore: 0,\n    message: \"\",\n    modalIsOpen: false\n  }\n\n  isPicked = event => {\n    const name = event.target.attributes.getNamedItem('name').value\n    console.log(event.target.attributes.getNamedItem('name').value)\n    console.log(this.state)\n    this.shuffleCharacters();\n    this.checkGuess(name, this.updateTopScore);\n  }\n\n  updateTopScore = (newState, cb) => {\n    if (newState.pickedCharacters.length > newState.topScore) {\n      newState.topScore++;\n      this.setState({ topScore: newState.topScore })\n    }\n    cb(newState);\n  }\n\n  shuffleCharacters = () => {\n    this.setState({characters: this.shuffleArray(this.state.characters)})\n  }\n\n  openModal() {\n    this.setState({modalIsOpen: true});\n  }\n \n  afterOpenModal() {\n    // references are now sync'd and can be accessed.\n    this.subtitle.style.color = '#f00';\n  }\n \n  closeModal() {\n    this.setState({modalIsOpen: false});\n  }\n\n  shuffleArray = (array) => {\n    let i, j, x;\n    for (i = array.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = array[i];\n      array[i] = array[j];\n      array[j] = x;\n    }\n    return array;\n  }\n\n  checkGuess = (name, cb) => {\n    const newState = { ...this.state };\n    if (newState.pickedCharacters.includes(name)) {\n      newState.message = `You already chose that character. Game Over!`\n      newState.pickedCharacters = []\n      alert(`You already chose that character. Game Over!`)\n      this.setState({ message: newState.message})\n      this.setState({ pickedCharacters: []})\n    } else {\n      newState.pickedCharacters.push(name);\n      this.setState({ pickedCharacters: newState.pickedCharacters })\n    }\n    cb(newState, this.checkWin)\n  }\n\n  checkWin = (newState) => {\n    if(newState.pickedCharacters.length === 12) {\n      newState.message = `You win! Congratulations`\n      alert(`You win! Congratulations`)\n      newState.pickedCharacters = [];\n      this.setState({ message: newState.message})\n      this.setState({ pickedCharacters: [] });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar/>\n        {/* <Modal\n          message={this.state.message}\n        /> */}\n        <div className=\"container\">\n          <div className=\"row score-info valign-wrapper\">\n            <div className=\"col m8 s12\">\n              <h4>Test your skills. Don't click the same image twice!</h4>\n            </div>\n            <div className=\"col m4 s12 center\">\n              <Score type=\"Score\" score={this.state.pickedCharacters.length}/>\n              <Score type=\"Top Score\" score={this.state.topScore}/>\n            </div>\n          </div>\n        </div>\n        <div id=\"grid\" className=\"container\">\n          {this.state.characters.map(character => (\n            <CharacterCard\n              key={character.id}\n              id={character.id}\n              name={character.name}\n              image={character.image}\n              isPicked={this.isPicked}\n            />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}